<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ADO工具箱</title>
    <link href="https://dongyiliang.github.io/gh-pages/feed.xml" rel="self" />
    <link href="https://dongyiliang.github.io/gh-pages" />
    <updated>2022-05-14T17:24:05+08:00</updated>
    <author>
        <name>yiliang.dong</name>
    </author>
    <id>https://dongyiliang.github.io/gh-pages</id>

    <entry>
        <title>flutter国内加速镜像</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/flutterguo-nei-jia-su-jing-xiang.html"/>
        <id>https://dongyiliang.github.io/gh-pages/flutterguo-nei-jia-su-jing-xiang.html</id>
            <category term="flutter"/>

        <updated>2022-05-14T15:49:12+08:00</updated>
            <summary>
                <![CDATA[
                    源码安装 git clone https://github.com/flutter/flutter.git -b stable 下面是国内几个镜像， PUB_HOSTED_URL是Dart依赖包地址 FLUTTER_STORAGE_BASE_URL是Flutter依赖文件地址。 要手动下载最新版本的flutter SDK包，可以访问 FLUTTER_STORAGE_BASE_URL 地址，然后进入/flutter_infra/releases/目录下载（这个方式Flutter社区不可用）。 Flutter 社区 社区主镜像，采用多种方式同步 Flutter 开发者资源（推荐）。 $ export PUB_HOSTED_URL=https://pub.flutter-io.cn $ export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn 上海交大 Linux 用户组 使用反向代理方式建立的 Flutter 镜像，数据与站源实时同步。 Pub API 返回值未做处理，可能造成无法访问的情况。 $ export PUB_HOSTED_URL=https://dart-pub.mirrors.sjtug.sjtu.edu.cn $ export FLUTTER_STORAGE_BASE_URL=https://mirrors.sjtug.sjtu.edu.cn $ export PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub $ export FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/flutter&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="源码安装">源码安装</h3>
<p>git clone <a href="https://github.com/flutter/flutter.git">https://github.com/flutter/flutter.git</a> -b stable</p>
<h3 id=""></h3>
<p>下面是国内几个镜像，
PUB_HOSTED_URL是Dart依赖包地址
FLUTTER_STORAGE_BASE_URL是Flutter依赖文件地址。</p>
<p>要手动下载最新版本的flutter SDK包，可以访问 FLUTTER_STORAGE_BASE_URL 地址，然后进入/flutter_infra/releases/目录下载（这个方式Flutter社区不可用）。</p>
<ul>
<li><p>Flutter 社区
社区主镜像，采用多种方式同步 Flutter 开发者资源（推荐）。
$ export PUB_HOSTED_URL=<a href="https://pub.flutter-io.cn">https://pub.flutter-io.cn</a>
$ export FLUTTER_STORAGE_BASE_URL=<a href="https://storage.flutter-io.cn">https://storage.flutter-io.cn</a></p>
</li>
<li><p>上海交大 Linux 用户组
使用反向代理方式建立的 Flutter 镜像，数据与站源实时同步。 Pub API 返回值未做处理，可能造成无法访问的情况。</p>
</li>
</ul>
<p>$ export PUB_HOSTED_URL=<a href="https://dart-pub.mirrors.sjtug.sjtu.edu.cn">https://dart-pub.mirrors.sjtug.sjtu.edu.cn</a>
$ export FLUTTER_STORAGE_BASE_URL=<a href="https://mirrors.sjtug.sjtu.edu.cn">https://mirrors.sjtug.sjtu.edu.cn</a></p>
<ul>
<li>清华大学 TUNA 协会
定时与 Flutter 社区 Storage 镜像同步，Pub API 采取定时主动抓取策略，镜像配置了完善的失败回源策略（推荐）。</li>
</ul>
<p>$ export PUB_HOSTED_URL=<a href="https://mirrors.tuna.tsinghua.edu.cn/dart-pub">https://mirrors.tuna.tsinghua.edu.cn/dart-pub</a>
$ export FLUTTER_STORAGE_BASE_URL=<a href="https://mirrors.tuna.tsinghua.edu.cn/flutter">https://mirrors.tuna.tsinghua.edu.cn/flutter</a></p>
<ul>
<li>CNNIC
基于 TUNA 协会的镜像服务，数据策略与 TUNA 一致，通过非教育网的域名访问。</li>
</ul>
<p>$ export PUB_HOSTED_URL=<a href="http://mirrors.cnnic.cn/dart-pub">http://mirrors.cnnic.cn/dart-pub</a>
$ export FLUTTER_STORAGE_BASE_URL=<a href="http://mirrors.cnnic.cn/flutter">http://mirrors.cnnic.cn/flutter</a></p>
<ul>
<li>腾讯云开源镜像站
定时（每天凌晨）与 TUNA 协会镜像同步，数据有延迟，访问速度有待反馈。</li>
</ul>
<p>$ export PUB_HOSTED_URL=<a href="https://mirrors.cloud.tencent.com/dart-pub">https://mirrors.cloud.tencent.com/dart-pub</a>
$ export FLUTTER_STORAGE_BASE_URL=<a href="https://mirrors.cloud.tencent.com/flutter">https://mirrors.cloud.tencent.com/flutter</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>github加速</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/githubjia-su.html"/>
        <id>https://dongyiliang.github.io/gh-pages/githubjia-su.html</id>
            <category term="环境配置"/>
            <category term="github"/>

        <updated>2022-05-14T11:42:45+08:00</updated>
            <summary>
                <![CDATA[
                    加速地址 fastgit.org：https://doc.fastgit.org/ http://cnpmjs.org：https://github.com.cnpmjs.org/ http://gitclone.com：https://gitclone.com/ gitee：https://gitee.com/mirrors GitHub 文件加速：https://gh.api.99988866.xyz/ Github 仓库加速：https://github.zhlh6.cn/ Github 仓库加速：http://toolwa.com/github/ 加速 clone # 方法一：手动替换地址 #原地址 $ git clone https://github.com/kubernetes/kubernetes.git #改为 $ git clone https://github.com.cnpmjs.org/kubernetes/kubernetes.git #或者 $ git clone https://hub.fastgit.org/kubernetes/kubernetes.git #或者 $ git clone https://gitclone.com/github.com/kubernetes/kubernetes.git # 方法二：配置git自动替换 $ git config --global url.&quot;https://hub.fastgit.org&quot;.insteadOf https://github.com # 测试&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="加速地址">加速地址</h3>
<ol>
<li>fastgit.org：<a href="https://doc.fastgit.org/">https://doc.fastgit.org/</a></li>
<li><a href="http://cnpmjs.org%EF%BC%9Ahttps://github.com.cnpmjs.org/">http://cnpmjs.org：https://github.com.cnpmjs.org/</a></li>
<li><a href="http://gitclone.com%EF%BC%9Ahttps://gitclone.com/">http://gitclone.com：https://gitclone.com/</a></li>
<li>gitee：<a href="https://gitee.com/mirrors">https://gitee.com/mirrors</a></li>
<li>GitHub 文件加速：<a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz/</a></li>
<li>Github 仓库加速：<a href="https://github.zhlh6.cn/">https://github.zhlh6.cn/</a></li>
<li>Github 仓库加速：<a href="http://toolwa.com/github/">http://toolwa.com/github/</a></li>
</ol>
<h3 id="加速-clone">加速 clone</h3>
<pre><code># 方法一：手动替换地址 
#原地址 
$ git clone https://github.com/kubernetes/kubernetes.git 
#改为 
$ git clone https://github.com.cnpmjs.org/kubernetes/kubernetes.git 
#或者 
$ git clone https://hub.fastgit.org/kubernetes/kubernetes.git 
#或者 
$ git clone https://gitclone.com/github.com/kubernetes/kubernetes.git 
 
# 方法二：配置git自动替换 
$ git config --global url.&quot;https://hub.fastgit.org&quot;.insteadOf https://github.com 
# 测试 
$ git clone https://github.com/kubernetes/kubernetes.git 
# 查看git配置信息 
$ git config --global --list 
# 取消设置 
$ git config --global --unset url.https://github.com/.insteadof 
</code></pre>
<h3 id="加速release">加速release</h3>
<pre><code># 原地址 
wget https://github.com/goharbor/harbor/releases/download/v2.0.2/harbor-offline-installer-v2.0.2.tgz 
# 加速下载方法一 
wget https://download.fastgit.org/goharbor/harbor/releases/download/v2.0.2/harbor-offline-installer-v2.0.2.tgz 
# 加速下载方法二 
wget https://hub.fastgit.org/goharbor/harbor/releases/download/v2.0.2/harbor-offline-installer-v2.0.2.tgz 

//测试1
https://hub.fastgit.org/ipfs-desktop/releases/download/v0.20.6/IPFS-Desktop-Setup-0.20.6.exe

https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.20.6/IPFS-Desktop-Setup-0.20.6.exe

</code></pre>
<h3 id="加速-raw">加速 raw</h3>
<pre><code># 原地址 
$ wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/README.md 
# 加速下载方法一 
$ wget https://raw.staticdn.net/kubernetes/kubernetes/master/README.md 
# 加速下载方法二 
$ wget https://raw.fastgit.org/kubernetes/kubernetes/master/README.md
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>cygwin安装配置</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/cygwinan-zhuang-pei-zhi.html"/>
        <id>https://dongyiliang.github.io/gh-pages/cygwinan-zhuang-pei-zhi.html</id>
            <category term="环境配置"/>
            <category term="windows"/>

        <updated>2022-05-14T10:22:16+08:00</updated>
            <summary>
                <![CDATA[
                    为了方便使用windows下的编辑器写代码并使用make命令，所以在windows上也安装make，windows下使用gcc和g++需要安装MinGW32。 https://www.mingw-w64.org/downloads/ http://cygwin.com/install.html
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>为了方便使用windows下的编辑器写代码并使用make命令，所以在windows上也安装make，windows下使用gcc和g++需要安装MinGW32。</p>
<h3 id="下载地址">下载地址</h3>
<p><a href="https://www.mingw-w64.org/downloads/">https://www.mingw-w64.org/downloads/</a>
<a href="http://cygwin.com/install.html">http://cygwin.com/install.html</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>cmder快捷键</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/cmderkuai-jie-jian.html"/>
        <id>https://dongyiliang.github.io/gh-pages/cmderkuai-jie-jian.html</id>
            <category term="快捷键"/>
            <category term="windows"/>

        <updated>2022-05-12T20:07:10+08:00</updated>
            <summary>
                <![CDATA[
                    快捷键 Tab #命令补全 Ctrl+T #建立新页 Ctrl+W #关闭标签页 Ctrl+Tab #切换标签页 Alt+F4 #关闭所有标签页 Ctrl+n #切换到第n个页签 Alt + Enter #切换到全屏状态
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="快捷键">快捷键</h3>
<pre><code>Tab #命令补全
Ctrl+T #建立新页
Ctrl+W #关闭标签页
Ctrl+Tab #切换标签页
Alt+F4 #关闭所有标签页
Ctrl+n #切换到第n个页签
Alt + Enter #切换到全屏状态
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>爬网站工具templatespider</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/pa-wang-zhan-gong-ju.html"/>
        <id>https://dongyiliang.github.io/gh-pages/pa-wang-zhan-gong-ju.html</id>
            <category term="建站工具"/>

        <updated>2022-05-12T18:01:20+08:00</updated>
            <summary>
                <![CDATA[
                    简介 看好哪个网站，指定好URL，自动扒下来做成 html模版。并且所下载的css、js、图片、html文件会自动分好类保存到特定文件夹！ 然后使用 模版计算工具，自动将 html模版计算合成为 网市场云建站系统 可用的模版。 http://www.templatespider.zvo.cn/#rjxz https://gitee.com/mail_osc/templatespider
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="简介">简介</h3>
<p>看好哪个网站，指定好URL，自动扒下来做成 html模版。并且所下载的css、js、图片、html文件会自动分好类保存到特定文件夹！ 然后使用 模版计算工具，自动将 html模版计算合成为 网市场云建站系统 可用的模版。</p>
<h3 id="下载地址">下载地址</h3>
<p><a href="http://www.templatespider.zvo.cn/#rjxz">http://www.templatespider.zvo.cn/#rjxz</a></p>
<h3 id="源码地址">源码地址</h3>
<p><a href="https://gitee.com/mail_osc/templatespider">https://gitee.com/mail_osc/templatespider</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>webview2安装</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/webview2an-zhuang.html"/>
        <id>https://dongyiliang.github.io/gh-pages/webview2an-zhuang.html</id>
            <category term="windows"/>

        <updated>2022-05-12T17:11:19+08:00</updated>
            <summary>
                <![CDATA[
                    下载地址 https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/ https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/6a0e8a9b-21a9-41ef-8dbd-584d151a0433/MicrosoftEdgeWebView2RuntimeInstallerX64.exe
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="下载地址">下载地址</h3>
<p><a href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/">https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/</a></p>
<p><a href="https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/6a0e8a9b-21a9-41ef-8dbd-584d151a0433/MicrosoftEdgeWebView2RuntimeInstallerX64.exe">https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/6a0e8a9b-21a9-41ef-8dbd-584d151a0433/MicrosoftEdgeWebView2RuntimeInstallerX64.exe</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>tauri项目案例</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/taurixiang-mu-an-li.html"/>
        <id>https://dongyiliang.github.io/gh-pages/taurixiang-mu-an-li.html</id>
            <category term="tauri"/>

        <updated>2022-05-14T17:24:05+08:00</updated>
            <summary>
                <![CDATA[
                    yarn初识生成项目 //检查rustup安装 rustup show //建空项目 cd D:\taurispace\ //使用模板创建项目 npx create-tauri-app cd tauri-app npm run tauri info //预览项目 npm run tauri dev //生成项目 npm run tauri build
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="yarn初识生成项目">yarn初识生成项目</h3>
<pre><code>//检查rustup安装
rustup show

//建空项目
cd D:\taurispace\

//使用模板创建项目
npx create-tauri-app

cd tauri-app
npm run tauri info

//预览项目
npm run tauri dev

//生成项目
npm run tauri build
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>yarn常用命令</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/yarnchang-yong-ming-ling.html"/>
        <id>https://dongyiliang.github.io/gh-pages/yarnchang-yong-ming-ling.html</id>
            <category term="常用命令"/>
            <category term="nodejs"/>

        <updated>2022-05-12T16:53:08+08:00</updated>
            <summary>
                <![CDATA[
                    yarn安装 npm i yarn -g Yarn -v yarn init 与 npm init 一样通过交互式会话创建一个 package.json yarn init # yarn npm init # npm yarn init –yes # 简写 -y npm init -y 通过 yarn add 添加依赖会更新 package.json 以及 yarn.lock 文件 1).开发环境 yarn add 依赖会记录在 package.json 的&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <ol>
<li>yarn安装</li>
</ol>
<p>npm i yarn -g</p>
<ol start="2">
<li>查看版本</li>
</ol>
<p>Yarn -v</p>
<ol start="3">
<li>开始一个新工程</li>
</ol>
<p>yarn init 与 npm init 一样通过交互式会话创建一个 package.json</p>
<p>yarn init # yarn</p>
<p>npm init # npm</p>
<ol start="4">
<li><h1 id="跳过会话，直接通过默认值生成-packagejson">跳过会话，直接通过默认值生成 package.json</h1>
</li>
</ol>
<p>yarn init –yes # 简写 -y</p>
<p>npm init -y</p>
<ol start="5">
<li>添加一个依赖</li>
</ol>
<p>通过 yarn add 添加依赖会更新 package.json 以及 yarn.lock 文件</p>
<p>1).开发环境</p>
<p>yarn add <packageName> 依赖会记录在 package.json 的 dependencies 下 开发环境</p>
<p>yarn add <a href="mailto:&#119;&#101;&#98;&#112;&#x61;&#x63;&#x6b;&#x40;&#x32;&#x2e;&#51;&#x2e;&#51;">&#119;&#101;&#98;&#112;&#x61;&#x63;&#x6b;&#x40;&#x32;&#x2e;&#51;&#x2e;&#51;</a> # yarn –save 是 yarn 默认的，默认记录在 package.json 中</p>
<p>npm install <a href="mailto:&#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#107;&#64;&#x32;&#x2e;&#x33;&#46;&#51;">&#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#107;&#64;&#x32;&#x2e;&#x33;&#46;&#51;</a> –save # npm</p>
<p>2).生产环境</p>
<p>yarn add <packageName> –dev 依赖会记录在 package.json 的 devDependencies 下 生产环境</p>
<p>yarn add webpack –dev # yarn 简写 -D</p>
<p>npm install webpack –save-dev # npm</p>
<p>3).全局</p>
<p>yarn global add <packageName> 全局安装依赖</p>
<p>yarn global add webpack # yarn</p>
<p>npm install webpack -g # npm</p>
<ol start="6">
<li>更新一个依赖</li>
</ol>
<p>yarn upgrade 用于更新包到基于规范范围的最新版本</p>
<p>yarn upgrade # 升级所有依赖项，不记录在 package.json 中</p>
<p>npm update # npm 可以通过 ‘–save|–save-dev’ 指定升级哪类依赖</p>
<p>yarn upgrade webpack # 升级指定包</p>
<p>npm update webpack –save-dev # npm</p>
<p>yarn upgrade –latest # 忽略版本规则，升级到最新版本，并且更新 package.json</p>
<ol start="7">
<li>移除一个依赖</li>
</ol>
<p>yarn remove <packageName></p>
<p>yarn remove webpack # yarn</p>
<p>npm uninstall webpack –save # npm 可以指定 –save | –save-dev</p>
<ol start="8">
<li>安装 package.json 中的所有文件</li>
</ol>
<p>yarn 或者 yarn install</p>
<p>yarn install # 或者 yarn 在 node_modules 目录安装 package.json 中列出的所有依赖</p>
<p>npm install # npm</p>
<p>yarn install 安装时，如果 node_modules 中有相应的包则不会重新下载 –force 可以强制重新下载安装</p>
<p>yarn install –force # 强制下载安装</p>
<p>npm install –force # npm</p>
<ol start="9">
<li>运行脚本</li>
</ol>
<p>yarn run 用来执行在 package.json 中 scripts 属性下定义的脚本</p>
<p>// package.json</p>
<p>{</p>
<p>“scripts”: {</p>
<p>“dev”: “node app.js”,</p>
<p>“start”: “node app.js”</p>
<p>}</p>
<p>}</p>
<p>yarn run dev # yarn 执行 dev 对应的脚本 node app.js</p>
<p>npm run # npm</p>
<p>yarn start # yarn</p>
<p>npm start # npm</p>
<p>与 npm 一样 可以有 yarn start 和 yarn test 两个简写的运行脚本方式</p>
<ol start="10">
<li>显示某个包信息</li>
</ol>
<p>yarn info <packageName> 可以用来查看某个模块的最新版本信息</p>
<p>yarn info webpack # yarn</p>
<p>npm info webpack # npm</p>
<p>yarn info webpack –json # 输出 json 格式</p>
<p>npm info webpack –json # npm</p>
<p>yarn info webpack readme # 输出 README 部分</p>
<p>npm info webpack readme</p>
<ol start="11">
<li>列出项目的所有依赖</li>
</ol>
<p>yarn list</p>
<p>yarn list # 列出当前项目的依赖</p>
<p>npm list # npm</p>
<p>yarn list –depth=0 # 限制依赖的深度</p>
<p>sudo yarn global list # 列出全局安装的模块</p>
<ol start="12">
<li>管理 yarn 配置文件</li>
</ol>
<p>yarn coinfig</p>
<p>yarn config set key value # 设置</p>
<p>npm config set key value</p>
<p>yarn config get key # 读取值</p>
<p>npm config get key</p>
<p>yarn config delete key # 删除</p>
<p>npm config delete key</p>
<p>yarn config list # 显示当前配置</p>
<p>npm config list</p>
<p>yarn config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a> # 设置淘宝镜像</p>
<p>npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a> # npm</p>
<ol start="13">
<li>缓存</li>
</ol>
<p>yarn cache</p>
<p>sudo yarn cache list # 列出已缓存的每个包</p>
<p>sudo yarn cache dir # 返回 全局缓存位置</p>
<p>sudo yarn cache clean # 清除缓存</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>cmder安装配置</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/cmderan-zhuang-pei-zhi.html"/>
        <id>https://dongyiliang.github.io/gh-pages/cmderan-zhuang-pei-zhi.html</id>
            <category term="环境配置"/>
            <category term="windows"/>

        <updated>2022-05-12T16:32:16+08:00</updated>
            <summary>
                <![CDATA[
                    下载地址 https://cmder.net/ Tab manipulation Ctrl + ` : Global Summon from taskbar Win + Alt + p : Preferences (Or right click on title bar) Ctrl + t : New tab dialog (maybe you want to open cmd as admin?) Ctrl + w : Close&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="下载地址">下载地址</h3>
<p><a href="https://cmder.net/">https://cmder.net/</a></p>
<h3 id="安装">安装</h3>
<ul>
<li>Unzip</li>
<li>(optional) Place your own executable files into the bin folder to be injected into your PATH.</li>
<li>Run Cmder (Cmder.exe)</li>
</ul>
<h3 id="快捷键">快捷键</h3>
<pre><code>Tab manipulation
Ctrl + ` : Global Summon from taskbar
Win + Alt + p : Preferences (Or right click on title bar)
Ctrl + t : New tab dialog (maybe you want to open cmd as admin?)
Ctrl + w : Close tab
Shift + Alt + number : Fast new tab:
1. CMD
2. PowerShell
Alt + Enter : Fullscreen

Shell
Ctrl + Alt + u : Traverse up in directory structure (lovely feature!)
End, Home, Ctrl : Traverse text as usual on Windows
Ctrl + r : History search
Shift + mouse : Select and copy text from buffer
Right click / Ctrl + Shift + v : Paste text
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>choco常用命令</title>
        <author>
            <name>yiliang.dong</name>
        </author>
        <link href="https://dongyiliang.github.io/gh-pages/chocolateychang-yong-ming-ling.html"/>
        <id>https://dongyiliang.github.io/gh-pages/chocolateychang-yong-ming-ling.html</id>
            <category term="常用命令"/>
            <category term="windows"/>

        <updated>2022-05-12T19:48:09+08:00</updated>
            <summary>
                <![CDATA[
                    常用命令 * search - 搜索包 choco search something * list - 列出包 choco list -lo * install - 安装 choco install baretail * pin - 固定包的版本，防止包被升级 choco pin windirstat * upgrade - 安装包的升级 choco upgrade baretail * uninstall - 安装包的卸载 choco uninstall baretail * 安装Ruby&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="常用命令">常用命令</h3>
<pre><code>* search  - 搜索包 choco search something
* list  - 列出包 choco list -lo
* install  - 安装 choco install baretail
* pin  - 固定包的版本，防止包被升级 choco pin windirstat
* upgrade  - 安装包的升级 choco upgrade baretail
* uninstall  - 安装包的卸载 choco uninstall baretail
* 安装Ruby Gem  - choco install compass -source ruby
* 安装Python Egg  - choco install sphynx -source python
* 安装IIS服务器特性  - choco install IIS -source windowsfeatures
* 安装Webpi特性  - choco install IIS7.5Express -source webpi

// 安装包
choco install &lt;package&gt;
// 如果使用 -version 可以指定版本

// 查看安装的包
choco list -l
choco list -local-only

// 包的更新，包括chocolatey本身
choco upgrade &lt;packagename&gt;

// 包的卸载
choco uninstall

// 包的搜索（我更喜欢去官网的Packages页上搜）
choco search

//查看默认源
choco source list

//添加国内源（垃圾玩意，连不上了）
choco source add -n=seuic -s&quot;http://choco.seuic.info/nuget/&quot; 
choco source remove -n=chocolatey
choco source add -n=chocolatey -s&quot;https://chocolatey.org/api/v2/&quot;  --priority=3

//查看新源的东西
choco list -s&quot;seuic&quot;

//这个所谓国内源连不上的，赶紧删除
choco source remove -n=seuic

//choco source命令
choco source
choco source list
choco source add -n=bob -s=&quot;https://somewhere/out/there/api/v2/&quot;
choco source add -n=bob -s &quot;&#39;https://somewhere/out/there/api/v2/&#39;&quot; -cert=\Users\bob\bob.pfx
choco source add -n=bob -s &quot;&#39;https://somewhere/out/there/api/v2/&#39;&quot; -u=bob -p=12345
choco source disable -n=bob
choco source enable -n=bob
choco source remove -n=bob



//安装cmder代替cmd
cinst cmder -y -s&quot;seuic&quot;
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
