{
    "version": "https://jsonfeed.org/version/1",
    "title": "ADO工具箱",
    "description": "",
    "home_page_url": "https://dongyiliang.github.io/gh-pages",
    "feed_url": "https://dongyiliang.github.io/gh-pages/feed.json",
    "user_comment": "",
    "author": {
        "name": "yiliang.dong"
    },
    "items": [
        {
            "id": "https://dongyiliang.github.io/gh-pages/nodejshuan-jing-pei-zhi.html",
            "url": "https://dongyiliang.github.io/gh-pages/nodejshuan-jing-pei-zhi.html",
            "title": "nodejs环境和国内镜像配置",
            "summary": "Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 https://nodejs.org/en/download/releases/ 例如：node-v16.15.0-win-x64.zip 例如：D:\\apps\\nodejs，将解压文件放在此处，该目录下可放多个版本，后续修改版本时可切换。安全完整路径为D:\\apps\\nodejs\\node-v16.15.0-win-x64。 在安装根路径下，新建node_global和node_cache目录，在命令行运行下面命令，设置npm全局变量和缓存位置 npm config set prefix \"D:\\apps\\nodejs\\node_global\" npm config set cache \"D:\\apps\\nodejs\\node_cache\" 5、设置环境变量 NODE_HOME=D:\\apps\\nodejs\\node-v16.15.0-win-x64 NODE_GLOBAL=D:\\apps\\nodejs\\node_global NODE_PATH=D:\\apps\\nodejs\\node_global\\node_modules 在PATH变量后面增加 %NODE_HOME% %NODE_GLOBAL% %NODE_PATH% 6、设置国内镜像，提升下载速度 #查看当前镜像地址 npm get registry #设置淘宝镜像 npm config set registry http://registry.npm.taobao.org/ #通过yarn设置淘宝镜像&hellip;",
            "content_html": "\n  <p>\n    Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\n  </p>\n\n    <h2 id=\"1\">\n      1、下载地址\n    </h2>\n\n  <p>\n    https://nodejs.org/en/download/releases/\n  </p>\n\n    <h2 id=\"2\">\n      2、选择解压缩版本\n    </h2>\n\n  <p>\n    例如：node-v16.15.0-win-x64.zip\n  </p>\n\n    <h2 id=\"3\">\n      3、选择安装根路径\n    </h2>\n\n  <p>\n    例如：D:\\apps\\nodejs，将解压文件放在此处，该目录下可放多个版本，后续修改版本时可切换。安全完整路径为D:\\apps\\nodejs\\node-v16.15.0-win-x64。\n  </p>\n\n    <h2 id=\"4npm\">\n      4、设置npm全局变量和缓存位置\n    </h2>\n\n  <p>\n    在安装根路径下，新建node_global和node_cache目录，在命令行运行下面命令，设置npm全局变量和缓存位置\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>npm config set prefix \"D:\\apps\\nodejs\\node_global\"\nnpm config set cache \"D:\\apps\\nodejs\\node_cache\"</code></pre>\n\n    <h2 id=\"5\">\n      5、设置环境变量\n    </h2>\n<pre class=\"line-numbers  language-batch\"><code>NODE_HOME=D:\\apps\\nodejs\\node-v16.15.0-win-x64\nNODE_GLOBAL=D:\\apps\\nodejs\\node_global\nNODE_PATH=D:\\apps\\nodejs\\node_global\\node_modules\n在PATH变量后面增加\n%NODE_HOME%\n%NODE_GLOBAL%\n%NODE_PATH%\n</code></pre>\n\n    <h2 id=\"6\">\n      6、设置国内镜像，提升下载速度\n    </h2>\n<pre class=\"line-numbers  language-batch\"><code>#查看当前镜像地址\nnpm get registry\n#设置淘宝镜像\nnpm config set registry http://registry.npm.taobao.org/\n#通过yarn设置淘宝镜像\nyarn config set registry http://registry.npm.taobao.org/\n#取消淘宝镜像，还原初始镜像\nnpm config set registry https://registry.npmjs.org/\n</code></pre>\n\n    <h2 id=\"7yarn\">\n      7、安装yarn测试\n    </h2>\n<pre class=\"line-numbers  language-batch\"><code>npm install -g yarn</code></pre>\n\n    <h2 id=\"8yarn\">\n      8、yarn缓存路径\n    </h2>\n<pre class=\"line-numbers  language-batch\"><code>#查看yarn本地缓存路径\nyarn cache dir\nC:\\Users\\dongyiliang\\AppData\\Local\\Yarn\\Cache\\v6\n#修改yarn cache路径\nyarn config set cache-folder \"D:\\apps\\nodejs\\yarn_cache\"\n\n#yarn缓存文件查看\nyarn cache list --pattern gulp\nyarn cache list --pattern \"gulp|grunt\"\nyarn cache list --pattern \"gulp-(match|newer)\"\n\n#设置环境变量\nYARN_CACHE_FOLDER=D:\\apps\\nodejs\\yarn_cache\n</code></pre>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "nodejs"
            ],
            "date_published": "2022-05-10T15:42:16+08:00",
            "date_modified": "2022-05-10T16:18:21+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/npmguo-nei-jing-xiang.html",
            "url": "https://dongyiliang.github.io/gh-pages/npmguo-nei-jing-xiang.html",
            "title": "npm国内镜像",
            "summary": "npm 全称 Node Package Manager，是 node.js 的模块依赖管理工具。由于 npm 的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。 国内优秀npm镜像 淘宝npm镜像 搜索地址：http://npm.taobao.org/ registry地址：http://registry.npm.taobao.org/ cnpmjs镜像 搜索地址：http://cnpmjs.org/ registry地址：http://r.cnpmjs.org/ 如何使用 有很多方法来配置 npm 的 registry 地址，下面根据不同情境列出几种比较常用的方法。以淘宝 npm 镜像举例： 临时使用 npm --registry https://registry.npm.taobao.org install express 持久使用 npm config set registry https://registry.npm.taobao.org // 配置后可通过下面方式来验证是否成功 npm config get registry // 或 npm&hellip;",
            "content_html": "\n  <p>\n    npm 全称 Node Package Manager，是 node.js 的模块依赖管理工具。由于 npm 的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。<br><br>国内优秀npm镜像<br>淘宝npm镜像<br>搜索地址：http://npm.taobao.org/<br>registry地址：http://registry.npm.taobao.org/<br><br>cnpmjs镜像<br>搜索地址：http://cnpmjs.org/<br>registry地址：http://r.cnpmjs.org/<br><br>如何使用<br>有很多方法来配置 npm 的 registry 地址，下面根据不同情境列出几种比较常用的方法。以淘宝 npm 镜像举例：<br><br>临时使用<br>npm --registry https://registry.npm.taobao.org install express<br>持久使用<br>npm config set registry https://registry.npm.taobao.org<br>// 配置后可通过下面方式来验证是否成功<br>npm config get registry<br>// 或<br>npm info express<br><br>通过cnpm使用<br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br>// 使用<br>cnpm install express<br><br>作者：别瞄我<br>链接：https://www.jianshu.com/p/4264dd0ab927<br>来源：简书<br>\n  </p>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "nodejs"
            ],
            "date_published": "2022-05-09T16:29:30+08:00",
            "date_modified": "2022-05-09T16:35:06+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/file-exists.html",
            "url": "https://dongyiliang.github.io/gh-pages/file-exists.html",
            "title": "file-exists ",
            "summary": "\"file-exists\": \"1.0.0\" const fileExists = require('file-exists'); fileExists('/index.html', (err, exists) =&gt; console.log(exists)) // OUTPUTS: true or false fileExists('/index.html').then(exists =&gt; { console.log(exists) // OUTPUTS: true or false }) console.log(fileExists.sync('/index.html')) // OUTPUTS: true or false",
            "content_html": "\n  <p>\n    \"file-exists\": \"1.0.0\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>const fileExists = require('file-exists');\n \nfileExists('/index.html', (err, exists) =&gt; console.log(exists)) // OUTPUTS: true or false\n \nfileExists('/index.html').then(exists =&gt; {\n  console.log(exists) // OUTPUTS: true or false\n})\n \nconsole.log(fileExists.sync('/index.html')) // OUTPUTS: true or false\n\n</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:30:32+08:00",
            "date_modified": "2022-05-08T13:30:32+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/delete-emptydi-gui-shan-chu-kong-mu-lu.html",
            "url": "https://dongyiliang.github.io/gh-pages/delete-emptydi-gui-shan-chu-kong-mu-lu.html",
            "title": "delete-empty递归删除空目录",
            "summary": "\"delete-empty\": \"3.0.0\" async-await (promise) const deleteEmpty = require('delete-empty'); (async () =&gt; { let deleted = await deleteEmpty('foo'); console.log(deleted); //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/'] })(); // or deleteEmpty('foo/') .then(deleted =&gt; console.log(deleted)) //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/'] .catch(console.error); async callback Returns the array of deleted directories in&hellip;",
            "content_html": "\n  <p>\n    \"delete-empty\": \"3.0.0\"\n  </p>\n\n  <p>\n    async-await (promise)\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>const deleteEmpty = require('delete-empty');\n\n(async () =&gt; {\n  let deleted = await deleteEmpty('foo');\n  console.log(deleted); //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/']\n})();\n \n// or\ndeleteEmpty('foo/')\n  .then(deleted =&gt; console.log(deleted)) //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/']\n  .catch(console.error);\n\n</code></pre>\n\n  <p>\n    async callback\n<br>Returns the array of deleted directories in the callback.\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>deleteEmpty('foo/', (err, deleted) =&gt; {\n  console.log(deleted); //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/']\n});</code></pre>\n\n  <p>\n    sync\n<br>Returns the array of deleted directories.\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>console.log(deleteEmpty.sync('foo/'));\n\n</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:19:49+08:00",
            "date_modified": "2022-05-08T13:19:49+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/count-fileswen-jian-jia-ji-shu-he-da-xiao.html",
            "url": "https://dongyiliang.github.io/gh-pages/count-fileswen-jian-jia-ji-shu-he-da-xiao.html",
            "title": "count-files文件夹计数和大小",
            "summary": "\"count-files\": \"2.6.2\" var countFiles = require('count-files') var stats = countFiles(dir, function (err, results) { console.log('done counting') console.log(results) // { files: 10, dirs: 2, bytes: 234 } }) setInterval(function () { console.log('current count', stats) // { files: 4, dirs: 1, bytes: 34 } }, 500)",
            "content_html": "\n  <p>\n    \"count-files\": \"2.6.2\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>var countFiles = require('count-files')\n \nvar stats = countFiles(dir, function (err, results) {\n  console.log('done counting')\n  console.log(results) // { files: 10, dirs: 2, bytes: 234 }\n})\n \nsetInterval(function () {\n  console.log('current count', stats) // { files: 4, dirs: 1, bytes: 34 }\n}, 500)</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:14:31+08:00",
            "date_modified": "2022-05-08T13:14:31+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/clean-css.html",
            "url": "https://dongyiliang.github.io/gh-pages/clean-css.html",
            "title": "clean-css优化css",
            "summary": "clean-css is a fast and efficient CSS optimizer for Node.js platform and any modern browser. \"clean-css\": \"5.2.4\" var CleanCSS = require('clean-css'); var input = 'a{font-weight:bold;}'; var options = { /* options */ }; var output = new CleanCSS(options).minify(input);",
            "content_html": "\n  <p>\n    clean-css is a fast and efficient CSS optimizer for Node.js platform and any modern browser.\n  </p>\n\n  <p>\n    \"clean-css\": \"5.2.4\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>var CleanCSS = require('clean-css');\nvar input = 'a{font-weight:bold;}';\nvar options = { /* options */ };\nvar output = new CleanCSS(options).minify(input);</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:02:25+08:00",
            "date_modified": "2022-05-08T13:14:59+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/better-sqlite3.html",
            "url": "https://dongyiliang.github.io/gh-pages/better-sqlite3.html",
            "title": "better-sqlite3",
            "summary": "\"better-sqlite3\": \"7.5.0\" const db = require('better-sqlite3')('foobar.db', options); const row = db.prepare('SELECT * FROM users WHERE id = ?').get(userId); console.log(row.firstName, row.lastName, row.email); In ES6 module notation: import Database from 'better-sqlite3'; const db = new Database('foobar.db', options)",
            "content_html": "\n  <p>\n    \"better-sqlite3\": \"7.5.0\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>const db = require('better-sqlite3')('foobar.db', options);\n\nconst row = db.prepare('SELECT * FROM users WHERE id = ?').get(userId);\nconsole.log(row.firstName, row.lastName, row.email);</code></pre>\n\n  <p>\n    In ES6 module notation:\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>import Database from 'better-sqlite3';\nconst db = new Database('foobar.db', options)</code></pre>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T12:59:47+08:00",
            "date_modified": "2022-05-08T12:59:47+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/archiver.html",
            "url": "https://dongyiliang.github.io/gh-pages/archiver.html",
            "title": "Archiver压缩包处理",
            "summary": "\"archiver\": \"5.3.0\" // require modules const fs = require('fs'); const archiver = require('archiver'); // create a file to stream archive data to. const output = fs.createWriteStream(__dirname + '/example.zip'); const archive = archiver('zip', { zlib: { level: 9 } // Sets the compression level. }); //&hellip;",
            "content_html": "\n  <p>\n    \"archiver\": \"5.3.0\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>// require modules\nconst fs = require('fs');\nconst archiver = require('archiver');\n\n// create a file to stream archive data to.\nconst output = fs.createWriteStream(__dirname + '/example.zip');\nconst archive = archiver('zip', {\n  zlib: { level: 9 } // Sets the compression level.\n});\n\n// listen for all archive data to be written\n// 'close' event is fired only when a file descriptor is involved\noutput.on('close', function() {\n  console.log(archive.pointer() + ' total bytes');\n  console.log('archiver has been finalized and the output file descriptor has closed.');\n});\n\n// This event is fired when the data source is drained no matter what was the data source.\n// It is not part of this library but rather from the NodeJS Stream API.\n// @see: https://nodejs.org/api/stream.html#stream_event_end\noutput.on('end', function() {\n  console.log('Data has been drained');\n});\n\n// good practice to catch warnings (ie stat failures and other non-blocking errors)\narchive.on('warning', function(err) {\n  if (err.code === 'ENOENT') {\n    // log warning\n  } else {\n    // throw error\n    throw err;\n  }\n});\n\n// good practice to catch this error explicitly\narchive.on('error', function(err) {\n  throw err;\n});\n\n// pipe archive data to the file\narchive.pipe(output);\n\n// append a file from stream\nconst file1 = __dirname + '/file1.txt';\narchive.append(fs.createReadStream(file1), { name: 'file1.txt' });\n\n// append a file from string\narchive.append('string cheese!', { name: 'file2.txt' });\n\n// append a file from buffer\nconst buffer3 = Buffer.from('buff it!');\narchive.append(buffer3, { name: 'file3.txt' });\n\n// append a file\narchive.file('file1.txt', { name: 'file4.txt' });\n\n// append files from a sub-directory and naming it `new-subdir` within the archive\narchive.directory('subdir/', 'new-subdir');\n\n// append files from a sub-directory, putting its contents at the root of archive\narchive.directory('subdir/', false);\n\n// append files from a glob pattern\narchive.glob('file*.txt', {cwd:__dirname});\n\n// finalize the archive (ie we are done appending files but streams have to finish yet)\n// 'close', 'end' or 'finish' may be fired right after calling this method so register to them beforehand\narchive.finalize();</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T12:51:21+08:00",
            "date_modified": "2022-05-08T12:52:05+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/pytorchan-zhuang.html",
            "url": "https://dongyiliang.github.io/gh-pages/pytorchan-zhuang.html",
            "title": "pytorch安装",
            "summary": "1、新建pytorch的python环境，避免和其他python环境冲突 conda create -n pytorch 2、打开pytorch官网 https://pytorch.org/get-started/locally/ 3、找到适合自己系统的安装命令 conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch",
            "content_html": "\n  <p>\n    1、新建pytorch的python环境，避免和其他python环境冲突\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>conda create -n pytorch</code></pre>\n\n  <p>\n    2、打开pytorch官网\n  </p>\n\n  <p>\n    https://pytorch.org/get-started/locally/\n  </p>\n\n  <p>\n    3、找到适合自己系统的安装命令\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</code></pre>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "python"
            ],
            "date_published": "2022-05-07T22:57:53+08:00",
            "date_modified": "2022-05-07T23:23:19+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/mysqljian-ku-yong-hu-he-dao-ru-dao-chu.html",
            "url": "https://dongyiliang.github.io/gh-pages/mysqljian-ku-yong-hu-he-dao-ru-dao-chu.html",
            "title": "mysql建库用户和导入导出",
            "summary": "1、用root登录mysql mysql --host localhost -uroot -p 2、执行建库和用户命令 create database ado; CREATE USER 'ado'@'localhost' IDENTIFIED WITH mysql_native_password BY '*******'; grant all on ado.* to 'ado'@'localhost'; 3、建立连接sql.bat mysql --host localhost -uado -p\"******\" ado 4、使用建表文件初始化数据库，如有 mysql -h localhost -u ado -p\"****\" ado&lt; D:\\data\\dzbm\\db\\backup_20201221.sql 5、建立dbbk.bat用于数据备份，导入还原参考步骤4 set d=%date:~0,10% set d=%d:/=%&hellip;",
            "content_html": "\n  <p>\n    1、用root登录mysql\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>mysql --host localhost -uroot -p</code></pre>\n\n  <p>\n    2、执行建库和用户命令\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>create database ado;\nCREATE USER 'ado'@'localhost' IDENTIFIED WITH mysql_native_password BY '*******';\ngrant all on ado.* to 'ado'@'localhost';</code></pre>\n\n  <p>\n    3、建立连接sql.bat\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>mysql --host localhost -uado -p\"******\" ado</code></pre>\n\n  <p>\n    4、使用建表文件初始化数据库，如有\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>mysql -h localhost -u ado -p\"****\" ado&lt; D:\\data\\dzbm\\db\\backup_20201221.sql</code></pre>\n\n  <p>\n    5、建立dbbk.bat用于数据备份，导入还原参考步骤4\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>set d=%date:~0,10%\nset d=%d:/=%\nset d=%d: =0%\necho \"%d%\"\n\nmysqldump -h localhost -u ado -p\"****\" ado &gt; D:\\data\\dzbm\\db\\backup_%d%.sql</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "mysql"
            ],
            "date_published": "2022-05-07T21:33:56+08:00",
            "date_modified": "2022-05-07T21:45:53+08:00"
        }
    ]
}
