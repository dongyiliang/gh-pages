{
    "version": "https://jsonfeed.org/version/1",
    "title": "ADO工具箱",
    "description": "",
    "home_page_url": "https://dongyiliang.github.io/gh-pages",
    "feed_url": "https://dongyiliang.github.io/gh-pages/feed.json",
    "user_comment": "",
    "author": {
        "name": "yiliang.dong"
    },
    "items": [
        {
            "id": "https://dongyiliang.github.io/gh-pages/file-exists.html",
            "url": "https://dongyiliang.github.io/gh-pages/file-exists.html",
            "title": "file-exists ",
            "summary": "\"file-exists\": \"1.0.0\" const fileExists = require('file-exists'); fileExists('/index.html', (err, exists) =&gt; console.log(exists)) // OUTPUTS: true or false fileExists('/index.html').then(exists =&gt; { console.log(exists) // OUTPUTS: true or false }) console.log(fileExists.sync('/index.html')) // OUTPUTS: true or false",
            "content_html": "\n  <p>\n    \"file-exists\": \"1.0.0\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>const fileExists = require('file-exists');\n \nfileExists('/index.html', (err, exists) =&gt; console.log(exists)) // OUTPUTS: true or false\n \nfileExists('/index.html').then(exists =&gt; {\n  console.log(exists) // OUTPUTS: true or false\n})\n \nconsole.log(fileExists.sync('/index.html')) // OUTPUTS: true or false\n\n</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:30:32+08:00",
            "date_modified": "2022-05-08T13:30:32+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/delete-emptydi-gui-shan-chu-kong-mu-lu.html",
            "url": "https://dongyiliang.github.io/gh-pages/delete-emptydi-gui-shan-chu-kong-mu-lu.html",
            "title": "delete-empty递归删除空目录",
            "summary": "\"delete-empty\": \"3.0.0\" async-await (promise) const deleteEmpty = require('delete-empty'); (async () =&gt; { let deleted = await deleteEmpty('foo'); console.log(deleted); //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/'] })(); // or deleteEmpty('foo/') .then(deleted =&gt; console.log(deleted)) //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/'] .catch(console.error); async callback Returns the array of deleted directories in&hellip;",
            "content_html": "\n  <p>\n    \"delete-empty\": \"3.0.0\"\n  </p>\n\n  <p>\n    async-await (promise)\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>const deleteEmpty = require('delete-empty');\n\n(async () =&gt; {\n  let deleted = await deleteEmpty('foo');\n  console.log(deleted); //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/']\n})();\n \n// or\ndeleteEmpty('foo/')\n  .then(deleted =&gt; console.log(deleted)) //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/']\n  .catch(console.error);\n\n</code></pre>\n\n  <p>\n    async callback\n<br>Returns the array of deleted directories in the callback.\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>deleteEmpty('foo/', (err, deleted) =&gt; {\n  console.log(deleted); //=&gt; ['foo/aa/', 'foo/a/cc/', 'foo/b/', 'foo/c/']\n});</code></pre>\n\n  <p>\n    sync\n<br>Returns the array of deleted directories.\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>console.log(deleteEmpty.sync('foo/'));\n\n</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:19:49+08:00",
            "date_modified": "2022-05-08T13:19:49+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/count-fileswen-jian-jia-ji-shu-he-da-xiao.html",
            "url": "https://dongyiliang.github.io/gh-pages/count-fileswen-jian-jia-ji-shu-he-da-xiao.html",
            "title": "count-files文件夹计数和大小",
            "summary": "\"count-files\": \"2.6.2\" var countFiles = require('count-files') var stats = countFiles(dir, function (err, results) { console.log('done counting') console.log(results) // { files: 10, dirs: 2, bytes: 234 } }) setInterval(function () { console.log('current count', stats) // { files: 4, dirs: 1, bytes: 34 } }, 500)",
            "content_html": "\n  <p>\n    \"count-files\": \"2.6.2\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>var countFiles = require('count-files')\n \nvar stats = countFiles(dir, function (err, results) {\n  console.log('done counting')\n  console.log(results) // { files: 10, dirs: 2, bytes: 234 }\n})\n \nsetInterval(function () {\n  console.log('current count', stats) // { files: 4, dirs: 1, bytes: 34 }\n}, 500)</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:14:31+08:00",
            "date_modified": "2022-05-08T13:14:31+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/clean-css.html",
            "url": "https://dongyiliang.github.io/gh-pages/clean-css.html",
            "title": "clean-css优化css",
            "summary": "clean-css is a fast and efficient CSS optimizer for Node.js platform and any modern browser. \"clean-css\": \"5.2.4\" var CleanCSS = require('clean-css'); var input = 'a{font-weight:bold;}'; var options = { /* options */ }; var output = new CleanCSS(options).minify(input);",
            "content_html": "\n  <p>\n    clean-css is a fast and efficient CSS optimizer for Node.js platform and any modern browser.\n  </p>\n\n  <p>\n    \"clean-css\": \"5.2.4\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>var CleanCSS = require('clean-css');\nvar input = 'a{font-weight:bold;}';\nvar options = { /* options */ };\nvar output = new CleanCSS(options).minify(input);</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T13:02:25+08:00",
            "date_modified": "2022-05-08T13:14:59+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/better-sqlite3.html",
            "url": "https://dongyiliang.github.io/gh-pages/better-sqlite3.html",
            "title": "better-sqlite3",
            "summary": "\"better-sqlite3\": \"7.5.0\" const db = require('better-sqlite3')('foobar.db', options); const row = db.prepare('SELECT * FROM users WHERE id = ?').get(userId); console.log(row.firstName, row.lastName, row.email); In ES6 module notation: import Database from 'better-sqlite3'; const db = new Database('foobar.db', options)",
            "content_html": "\n  <p>\n    \"better-sqlite3\": \"7.5.0\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>const db = require('better-sqlite3')('foobar.db', options);\n\nconst row = db.prepare('SELECT * FROM users WHERE id = ?').get(userId);\nconsole.log(row.firstName, row.lastName, row.email);</code></pre>\n\n  <p>\n    In ES6 module notation:\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>import Database from 'better-sqlite3';\nconst db = new Database('foobar.db', options)</code></pre>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T12:59:47+08:00",
            "date_modified": "2022-05-08T12:59:47+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/archiver.html",
            "url": "https://dongyiliang.github.io/gh-pages/archiver.html",
            "title": "Archiver压缩包处理",
            "summary": "\"archiver\": \"5.3.0\" // require modules const fs = require('fs'); const archiver = require('archiver'); // create a file to stream archive data to. const output = fs.createWriteStream(__dirname + '/example.zip'); const archive = archiver('zip', { zlib: { level: 9 } // Sets the compression level. }); //&hellip;",
            "content_html": "\n  <p>\n    \"archiver\": \"5.3.0\"\n  </p>\n<pre class=\"line-numbers  language-javascript\"><code>// require modules\nconst fs = require('fs');\nconst archiver = require('archiver');\n\n// create a file to stream archive data to.\nconst output = fs.createWriteStream(__dirname + '/example.zip');\nconst archive = archiver('zip', {\n  zlib: { level: 9 } // Sets the compression level.\n});\n\n// listen for all archive data to be written\n// 'close' event is fired only when a file descriptor is involved\noutput.on('close', function() {\n  console.log(archive.pointer() + ' total bytes');\n  console.log('archiver has been finalized and the output file descriptor has closed.');\n});\n\n// This event is fired when the data source is drained no matter what was the data source.\n// It is not part of this library but rather from the NodeJS Stream API.\n// @see: https://nodejs.org/api/stream.html#stream_event_end\noutput.on('end', function() {\n  console.log('Data has been drained');\n});\n\n// good practice to catch warnings (ie stat failures and other non-blocking errors)\narchive.on('warning', function(err) {\n  if (err.code === 'ENOENT') {\n    // log warning\n  } else {\n    // throw error\n    throw err;\n  }\n});\n\n// good practice to catch this error explicitly\narchive.on('error', function(err) {\n  throw err;\n});\n\n// pipe archive data to the file\narchive.pipe(output);\n\n// append a file from stream\nconst file1 = __dirname + '/file1.txt';\narchive.append(fs.createReadStream(file1), { name: 'file1.txt' });\n\n// append a file from string\narchive.append('string cheese!', { name: 'file2.txt' });\n\n// append a file from buffer\nconst buffer3 = Buffer.from('buff it!');\narchive.append(buffer3, { name: 'file3.txt' });\n\n// append a file\narchive.file('file1.txt', { name: 'file4.txt' });\n\n// append files from a sub-directory and naming it `new-subdir` within the archive\narchive.directory('subdir/', 'new-subdir');\n\n// append files from a sub-directory, putting its contents at the root of archive\narchive.directory('subdir/', false);\n\n// append files from a glob pattern\narchive.glob('file*.txt', {cwd:__dirname});\n\n// finalize the archive (ie we are done appending files but streams have to finish yet)\n// 'close', 'end' or 'finish' may be fired right after calling this method so register to them beforehand\narchive.finalize();</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "npmjs"
            ],
            "date_published": "2022-05-08T12:51:21+08:00",
            "date_modified": "2022-05-08T12:52:05+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/pytorchan-zhuang.html",
            "url": "https://dongyiliang.github.io/gh-pages/pytorchan-zhuang.html",
            "title": "pytorch安装",
            "summary": "1、新建pytorch的python环境，避免和其他python环境冲突 conda create -n pytorch 2、打开pytorch官网 https://pytorch.org/get-started/locally/ 3、找到适合自己系统的安装命令 conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch",
            "content_html": "\n  <p>\n    1、新建pytorch的python环境，避免和其他python环境冲突\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>conda create -n pytorch</code></pre>\n\n  <p>\n    2、打开pytorch官网\n  </p>\n\n  <p>\n    https://pytorch.org/get-started/locally/\n  </p>\n\n  <p>\n    3、找到适合自己系统的安装命令\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</code></pre>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "python"
            ],
            "date_published": "2022-05-07T22:57:53+08:00",
            "date_modified": "2022-05-07T23:23:19+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/mysqljian-ku-yong-hu-he-dao-ru-dao-chu.html",
            "url": "https://dongyiliang.github.io/gh-pages/mysqljian-ku-yong-hu-he-dao-ru-dao-chu.html",
            "title": "mysql建库用户和导入导出",
            "summary": "1、用root登录mysql mysql --host localhost -uroot -p 2、执行建库和用户命令 create database ado; CREATE USER 'ado'@'localhost' IDENTIFIED WITH mysql_native_password BY '*******'; grant all on ado.* to 'ado'@'localhost'; 3、建立连接sql.bat mysql --host localhost -uado -p\"******\" ado 4、使用建表文件初始化数据库，如有 mysql -h localhost -u ado -p\"****\" ado&lt; D:\\data\\dzbm\\db\\backup_20201221.sql 5、建立dbbk.bat用于数据备份，导入还原参考步骤4 set d=%date:~0,10% set d=%d:/=%&hellip;",
            "content_html": "\n  <p>\n    1、用root登录mysql\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>mysql --host localhost -uroot -p</code></pre>\n\n  <p>\n    2、执行建库和用户命令\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>create database ado;\nCREATE USER 'ado'@'localhost' IDENTIFIED WITH mysql_native_password BY '*******';\ngrant all on ado.* to 'ado'@'localhost';</code></pre>\n\n  <p>\n    3、建立连接sql.bat\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>mysql --host localhost -uado -p\"******\" ado</code></pre>\n\n  <p>\n    4、使用建表文件初始化数据库，如有\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>mysql -h localhost -u ado -p\"****\" ado&lt; D:\\data\\dzbm\\db\\backup_20201221.sql</code></pre>\n\n  <p>\n    5、建立dbbk.bat用于数据备份，导入还原参考步骤4\n  </p>\n<pre class=\"line-numbers  language-objectObject\"><code>set d=%date:~0,10%\nset d=%d:/=%\nset d=%d: =0%\necho \"%d%\"\n\nmysqldump -h localhost -u ado -p\"****\" ado &gt; D:\\data\\dzbm\\db\\backup_%d%.sql</code></pre>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "mysql"
            ],
            "date_published": "2022-05-07T21:33:56+08:00",
            "date_modified": "2022-05-07T21:45:53+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/adf.html",
            "url": "https://dongyiliang.github.io/gh-pages/adf.html",
            "title": "mysql安装和配置",
            "summary": "1、下载安装包 https://downloads.mysql.com/archives/community/ 2、解压后，在目录下新建my.ini文件 [client] port=3306 default-character-set=utf8 [mysqld] port=3306 character_set_server=utf8 basedir =D:\\apps\\mysql-5.7.19-winx64 datadir =D:\\data\\mysqldata 3、使用管理员权限打开cmd命令，进入Mysql的bin目录，运行安装命令 mysqld –install 4、运行初始化命令 mysqld –initialize –user=root –console 初始化后将在上面的datadir目录生成对应的数据库文件 5、启动mysql net start mysql 6、用root登录mysql mysql -u root -p 7、修改root密码 set password = password('新密码') 8、如果修改密码报错 ERROR 1045 (28000): Access denied for user ‘root’@‘localhost’&hellip;",
            "content_html": "\n  <p>\n    1、下载安装包\n  </p>\n\n  <p>\n    https://downloads.mysql.com/archives/community/\n  </p>\n\n  <p>\n    2、解压后，在目录下新建my.ini文件\n  </p>\n<pre class=\"line-numbers  language-ini\"><code>[client] \nport=3306 \ndefault-character-set=utf8 \n[mysqld] \nport=3306 \ncharacter_set_server=utf8 \nbasedir =D:\\apps\\mysql-5.7.19-winx64\ndatadir =D:\\data\\mysqldata\n</code></pre>\n\n  <p>\n    3、使用管理员权限打开cmd命令，进入Mysql的bin目录，运行安装命令\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>mysqld –install</code></pre>\n\n  <p>\n    4、运行初始化命令\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>mysqld –initialize –user=root –console\n</code></pre>\n\n  <p>\n    初始化后将在上面的datadir目录生成对应的数据库文件\n  </p>\n\n  <p>\n    5、启动mysql\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>net start mysql</code></pre>\n\n  <p>\n    6、用root登录mysql\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>mysql -u root -p</code></pre>\n\n  <p>\n    7、修改root密码\n  </p>\n<pre class=\"line-numbers  language-batch\"><code>set password = password('新密码')</code></pre>\n\n  <p>\n    8、如果修改密码报错\n  </p>\n<pre class=\"line-numbers  language-[object Object]\"><code>ERROR 1045 (28000): Access denied for user ‘root’@‘localhost’ (using password: YES)\n</code></pre>\n\n  <p>\n    在my.ini加一行\n  </p>\n<pre class=\"line-numbers  language-null\"><code>skip-grant-tables</code></pre>\n\n  <p>\n    这次登录跳过权限,等操作全部完成之后再删掉这一行。\n  </p>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "mysql"
            ],
            "date_published": "2022-05-07T21:02:29+08:00",
            "date_modified": "2022-05-07T21:27:31+08:00"
        },
        {
            "id": "https://dongyiliang.github.io/gh-pages/eclipsezhong-lombokcha-jian-an-zhuang-pei-zhi.html",
            "url": "https://dongyiliang.github.io/gh-pages/eclipsezhong-lombokcha-jian-an-zhuang-pei-zhi.html",
            "title": "eclipse中lombok插件安装配置",
            "summary": "Lombok是一个java库，可以自动插入到编辑器和构建工具中，提高java的性能。 永远不要再编写另一个getter或equals方法，使用一个注释，你的类就有了一个功能齐全的生成器，自动化了你的日志变量，等等。 https://projectlombok.org/download -javaagent:D:\\apps\\eclipse\\eclipse-jee-2020-09\\lombok.jar 重启eclipse",
            "content_html": "<p>Lombok是一个java库，可以自动插入到编辑器和构建工具中，提高java的性能。<br><br>永远不要再编写另一个getter或equals方法，使用一个注释，你的类就有了一个功能齐全的生成器，自动化了你的日志变量，等等。</p>\n<ul>\n<li>下载地址</li>\n</ul>\n<p> </p>\n<p><a href=\"https://projectlombok.org/download\">https://projectlombok.org/download</a></p>\n<ul>\n<li>双击下载的lombok.jar安装</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://dongyiliang.github.io/gh-pages/media/posts/5/LombokInstaller.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller-xs.png 300w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller-sm.png 480w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller-md.png 768w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller-lg.png 1024w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller-xl.png 1360w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller-2xl.png 1600w\"  alt=\"Lombok安装图\" width=\"833\" height=\"482\"></figure>\n<ul>\n<li>选择本地的eclipse安装路径安装</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://dongyiliang.github.io/gh-pages/media/posts/5/LombokInstaller_step2.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step2-xs.png 300w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step2-sm.png 480w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step2-md.png 768w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step2-lg.png 1024w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step2-xl.png 1360w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step2-2xl.png 1600w\"  alt=\"\" width=\"716\" height=\"450\"></figure>\n<ul>\n<li>用文本打开eclipse.ini文件，在文件末尾添加：</li>\n</ul>\n<p><code>-javaagent:D:\\apps\\eclipse\\eclipse-jee-2020-09\\lombok.jar</code></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://dongyiliang.github.io/gh-pages/media/posts/5/LombokInstaller_step3.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step3-xs.png 300w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step3-sm.png 480w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step3-md.png 768w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step3-lg.png 1024w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step3-xl.png 1360w ,https://dongyiliang.github.io/gh-pages/media/posts/5/responsive/LombokInstaller_step3-2xl.png 1600w\"  alt=\"\" width=\"940\" height=\"447\"></figure>\n<ul>\n<li>重启eclipse</li>\n</ul>",
            "author": {
                "name": "yiliang.dong"
            },
            "tags": [
                   "eclipse"
            ],
            "date_published": "2022-05-07T17:10:27+08:00",
            "date_modified": "2022-05-07T21:28:53+08:00"
        }
    ]
}
